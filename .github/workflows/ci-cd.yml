name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Prepare test environment
      run: |
        
        mkdir -p trained_model
        touch trained_model/.gitkeep
        # create __init__.py 文件
        touch __init__.py
        touch data_processing/__init__.py
        touch models/__init__.py
        touch tests/__init__.py
        # create conftest.py
        echo 'import sys, os; sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))' > tests/conftest.py
    
    - name: Run tests
      run: |
        # set PYTHONPATH
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        # run unitest
        python -m pytest tests/ -v
  
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/room-matching-api:latest
    
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production server..."
        # 这里添加您的部署脚本，例如 SSH 到服务器并拉取最新镜像
        # 或者使用 Kubernetes、AWS ECS 等部署服务 